#include <SFML/Graphics.hpp>
#include <SFML/Window.hpp>
#include <Cassert>
#include "windows.h"
#include "Vector.h"
#include "Sphere.h"
#include "Spring.h"

void accelerationSpheres(Sphere* sphere1, Sphere* sphere2, Spring spring)
{
    float force = -((sphere1->position - sphere2->position).length() - spring.length) * spring.rate;
    sphere1->acceleration = sphere1->acceleration + ((sphere1->position - sphere2->position).normalize() * force / sphere1->m);
    sphere2->acceleration = sphere2->acceleration + ((sphere2->position - sphere1->position).normalize() * force / sphere2->m);
}

void accelerationToZero(Sphere* sphere)
{
    sphere->acceleration = { 0, 0 };
}

int main()
{
    float t = 0.1;
    int windowX = 1200;
    int windowY = 800;
    const int n = 10;

    Sphere spheres[n];
    for (int i = 0; i < n; i++)
    {
        spheres[i] = { { float(rand() % 650), float(rand() % 700)}, {0, 0},  {0, 0}, 10, 255, 0, 0, 10 * (i + 1) };
    }

    Spring springs[n][n];
    for (int i = 0; i < n; i++)
    {
        for (int j = i + 1; j < n; j++)
        {
            springs[i][j] = { &spheres[i], &spheres[j], (spheres[i].position - spheres[j].position).length() - 10, float(5 * i + 2 * j) , 255, 255, 0 };
        }
    }
    for (int i = 0; i < n; i++)
    {
        springs[i][i] = { &spheres[i], &spheres[i] , 0, 0, 0, 0, 0 };
    }

    sf::RenderWindow window(sf::VideoMode(windowX, windowY), "Window");

    while (window.isOpen())
    {
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
            {
                window.close();
            }
        }

        for (int i = 0; i < n; i++)
        {
            accelerationToZero(&spheres[i]);
        }

        for (int i = 0; i < n; i++)
        {
            for (int j = i + 1; j < n; j++)
            {
                accelerationSpheres(&spheres[i], &spheres[j], springs[i][j]);
            }

            spheres[i].changeVelocity(t);
            spheres[i].move(t);
        }

        window.clear();

        for (int i = 0; i < n; i++)
        {
            for (int j = i + 1; j < n; j++)
            {
                springs[i][j].draw(&window);
            }
            spheres[i].draw(&window);
        }
        window.display();
        //Sleep(1000);
    }

    return 0;
}
